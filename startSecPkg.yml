-
  name: Start secondary package on halted node.
  hosts: all
  become: yes
  become_method: su
  become_flags: '-s /bin/bash'

  environment:
    PATH: "{{ ansible_env.PATH + ':/usr/local/cmcluster/bin' + ':/opt/cmcluster/bin'}}"

  vars_files:
    - vars/sgVars.yml

  tasks:
    - name: Checking inventory argument.
      fail:
        msg: 'The -i (inventory) argument is mandatory.'
      when: not inventory_file | regex_search(',')

    - name: Trigger basic checks.
      include_tasks: "{{ basePath }}/tasks/basicChecks.yml"

    - name: Save report.
      include_tasks: "{{ basePath }}/tasks/saveSGReport.yml"

    - name: Abort if any of the cluster nodes are not accessible.
      fail:
        msg: "Please make sure all cluster nodes are accessible / powered on."
      when: ping1 is failed or ping2 is failed

    - name: Abort if Primary package is down.
      fail:
        msg: "Primary package {{ primPackage.stdout }} seems to be down."
      when: primPackageStatus.stdout != "up"

    - name: Abort if Secondary package is up.
      fail:
        msg: "No action required. Secondary package {{ secPackage.stdout }} is up and running."
      when: secPackageStatus.stdout == "up"

    - name: Abort if cluster nodes don't have identical SG version.
      fail:
        msg: "Please make sure the SG version is identical on all cluster nodes."
      when: primSGvers.stdout != secSGvers.stdout 

    - name: Abort if SGeSAP_AVOID_DARKENING is not set to 1 on any cluster node.
      fail:
        msg: "Please make sure SGeSAP_AVOID_DARKENING is set to 1 on all cluster nodes."
      when: darkeningPrim.stdout is not search ('=\\s*1') or darkeningSec.stdout is not search ('=\\s*1')

    - name: Identify all the cluster nodes.
      shell: cmviewcl -v -fline |awk -F\| '/^node/ {print $2}' |awk -F= '/^name/ {print $2}'
      register: result

    - name: Capture name of Secondary node in a variable.
      set_fact:
        secNode: "{{ item }}"
      loop: "{{ result.stdout_lines }}"
      when: item != primNode.stdout

    - name: Enable node switching for {{ secPackage.stdout }}.
      shell: cmmodpkg -e {{ secPackage.stdout }} -n {{ secNode }}
      when: secSwitch.stdout is search('disabled')

    - name: Check status of Secondary node {{ secNode }}.
      shell: cmviewcl -v -fline -n {{ secNode }} |awk -F= '/^status/ {print $2}'
      register: secNodeStatus

    - name: Enable autorun for {{ secPackage.stdout }}.
      shell: cmmodpkg -e {{ secPackage.stdout }}

    - name: Run command cmrunnode on node {{ secNode }} only if it is down / halted.
      command: cmrunnode
      delegate_to: "{{ secNode }}"
      when: secNodeStatus.stdout != "up"

    - name: Wait for Secondary package {{ secPackage.stdout }} to reach status 'up' on node {{ secNode }}.
      shell: cmviewcl -v -fline -p {{ secPackage.stdout }} |awk -F= '/^status/ {print $2}'
      register: result
      until: result.stdout == "up"
      retries: 180
      delay: 10 #Value of 'retries' and 'delay' must be adjusted based on DB size.

    - name: Success message.
      debug:
        msg: Secondary package is up & running on node {{ secNode }}!

    - name: Identify Site name of Secondary site.
      shell: bash -lc "hdbnsutil -sr_state | grep 'site name' | awk '{print \$3}'"
      become_user: "{{ sidadm }}"
      register: secSite
      delegate_to: "{{ secNode }}"

    - name: Wait till Replication status becomes 'Active'.
      shell: bash -lc "python /usr/sap/{{ sid }}/HDB{{nr}}/exe/python_support/systemReplicationStatus.py -s {{ secSite.stdout }} |awk '/overall system replication/ {print \$5}'"
      become_user: "{{ sidadm }}"
      register: result
      until: result.stdout == "ACTIVE"
      retries: 180
      delay: 10 #Value of 'retries' and 'delay' must be adjusted based on DB size and length of disruption in Replication.
      delegate_to: "{{ primNode.stdout }}"

    - pause:
        prompt: "Wait 10 seconds for safesync to catch-up."
        seconds: 10

    - name: Check status of safesync blocks.
      shell: sr_safesync {{ primPackage.stdout }} |egrep "\bblock\b"
      register: result
      ignore_errors: true

    - name: Do not proceed further if safesync blocks are in 'active' status.
      fail:
        msg:
          - "{{ item }}"
          - "Please fix the issue before proceeding further."
      loop: "{{ result.stdout_lines }}"
      when: item.find(" active") != -1

    - name: Check status of Autorun for {{ primPackage.stdout }}.
      shell: cmviewcl -v -fline -p {{primPackage.stdout}} |awk -F= '/^autorun/ {print $2}'
      register: primAutorun

    - name: Enable autorun for {{ primPackage.stdout }}.
      shell: cmmodpkg -e {{ primPackage.stdout }}
      when: primAutorun.stdout == "disabled"

    - name: Enable node switching for {{ primPackage.stdout }}.
      shell: cmmodpkg -e {{ primPackage.stdout }} -n {{ primNode.stdout }} -n {{ secNode }}

    - name: Enable node switching for {{ secPackage.stdout }}.
      shell: cmmodpkg -e {{ secPackage.stdout }} -n {{ primNode.stdout }} -n {{ secNode }}

    - name: Set value of AUTOSTART_CMCLD to 1.
      lineinfile:
        path: "{{ (ansible_os_family == 'Suse') | ternary('/opt/cmcluster/conf/cmcluster.rc', '/usr/local/cmcluster/conf/cmcluster.rc') }}"
        regexp: ^AUTOSTART_CMCLD=[0-9]
        line: AUTOSTART_CMCLD=1
      delegate_to: "{{ secNode }}"

    - name: Status summary.
      debug:
        msg:
          - -- Cluster is now in a healthy state.
          - -- Primary package is active on {{ primNode.stdout }}.
          - -- Secondary package is active on {{ secNode }}.
