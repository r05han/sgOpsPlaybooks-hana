- name: Report licence type of {{ nodeNames.stdout_lines[0] }}.
  set_fact:
    sgReport: "{{ sgReport + '\nServiceguard license type:\n  Node ' + nodeNames.stdout_lines[0] + spacing + 'OK   ' + spacing + primLicType.stdout + '\n' if primLicType.stdout == 'Enterprise' or primLicType.stdout == 'Premium' or primLicType.stdout == 'Instant_ON' else sgReport + '\nServiceguard license type:\n  Node ' + nodeNames.stdout_lines[0] + spacing + 'Error' + spacing + primLicType.stdout + ' is not valid for HANA DB clusters. Enterprise or Premium license is required.\n' }}"

- name: Report licence type of {{ nodeNames.stdout_lines[1] }}.
  set_fact:
    sgReport: "{{ sgReport + '  Node ' + nodeNames.stdout_lines[1] + spacing + 'OK   ' + spacing + secLicType.stdout + '\n' if secLicType.stdout == 'Enterprise' or secLicType.stdout == 'Premium' or secLicType.stdout == 'Instant_ON' else sgReport + '  Node ' + nodeNames.stdout_lines[1] + spacing + 'Error' + spacing + secLicType.stdout + ' is not valid for HANA DB clusters. Enterprise or Premium license is required.\n' }}"

- name: Report license validity of {{ nodeNames.stdout_lines[0] }}.
  set_fact:
    sgReport: "{{ sgReport + '\nServiceguard license validity:\n  Node ' + nodeNames.stdout_lines[0] + spacing + 'OK   ' + spacing + primLicExp.stdout + '\n' if primLicExp.stdout == 'Indefinite' else sgReport + '\nServiceguard license validity:\n  Node ' + nodeNames.stdout_lines[0] + spacing + 'Error' + spacing + 'License is ' + primLicExp.stdout + '\n' if primLicExp.stdout == 'Invalid' else sgReport + '\nServiceguard license validity:\n  Node ' + nodeNames.stdout_lines[0] + spacing +  'Warning' + spacing + 'License will expire on ' + primLicExp.stdout + '\n' }}"

- name: Report license validity of {{ nodeNames.stdout_lines[1] }}.
  set_fact:
    sgReport: "{{ sgReport + '  Node ' + nodeNames.stdout_lines[1] + spacing + 'OK   ' + spacing + secLicExp.stdout + '\n' if secLicExp.stdout == 'Indefinite' else sgReport + '  Node ' + nodeNames.stdout_lines[1] + spacing + 'Error' + spacing + 'License is ' + secLicExp.stdout + '\n' if secLicExp.stdout == 'Invalid' else sgReport + '  Node ' + nodeNames.stdout_lines[1] + spacing + 'Warning' + spacing + 'License will expire on ' + secLicExp.stdout + '\n' }}"

- name: Report HANA version of {{ nodeNames.stdout_lines[0] }}.
  set_fact:
    sgReport: "{{ sgReport + '\nHANA version comparison:\n  Node ' + nodeNames.stdout_lines[0] + spacing + 'OK   ' + spacing + hdbVers + '\n' if hdbMajorPrim.stdout >= '2' and hdbMinorPrim.stdout >= '050' and hdbMajorPrim.stdout == hdbMajorSec.stdout and hdbMinorPrim.stdout == hdbMinorSec.stdout else sgReport + '\nHANA version comparison:\n  Node ' + nodeNames.stdout_lines[0] + spacing + 'Error' + spacing + 'HANA 2.0 SPS 05 Revision 50 is minimum requirement.\n' if hdbMajorPrim.stdout < '2' or (hdbMajorPrim.stdout == '2' and hdbMinorPrim.stdout < '050') else sgReport + '\nHANA version comparison:\n  Node ' + nodeNames.stdout_lines[0] + spacing + 'Warning' + spacing + 'HANA ' + hdbMajorPrim.stdout + ' Revision ' + hdbMinorPrim.stdout + ' doesnt match the version on ' + nodeNames.stdout_lines[1] + '\n' }}"

- name: Report HANA version of {{ nodeNames.stdout_lines[1] }}.
  set_fact:
    sgReport: "{{ sgReport + '  Node ' + nodeNames.stdout_lines[1] + spacing + 'OK   ' + spacing + hdbVers + '\n' if hdbMajorSec.stdout >= '2' and hdbMinorSec.stdout >= '050' and hdbMajorPrim.stdout == hdbMajorSec.stdout and hdbMinorPrim.stdout == hdbMinorSec.stdout else sgReport + '  Node ' + nodeNames.stdout_lines[1] + spacing + 'Error' + spacing + 'HANA 2.0 SPS 05 Revision 50 is minimum requirement.\n' if hdbMajorSec.stdout < '2' or (hdbMajorSec.stdout == '2'and hdbMinorSec.stdout < '050') else sgReport + '  Node ' + nodeNames.stdout_lines[1] + spacing + 'Warning' + spacing + 'HANA ' + hdbMajorSec.stdout + ' Revision ' + hdbMinorSec.stdout + ' doesnt match the version on ' + nodeNames.stdout_lines[0] + '\n'}}"

- name: Safesync check header.
  set_fact:
          sgReport: "{{ sgReport + '\nSafesync parameter checks:\n'}}"

- name: Report missing or incorrect Safesync parameters for {{ nodeNames.stdout_lines[0] }}.
  set_fact:
    sgReport: "{{ sgReport + '  Node ' + nodeNames.stdout_lines[0] + spacing + 'Error' + spacing + item + ' is missing or incorrect in global.ini.\n' }}"
  loop: "{{ primDiff.stdout_lines }}"
  when: primDiff.stdout_lines|length != 0

- name: Report healthy Safesync parameters for {{ nodeNames.stdout_lines[0] }}.
  set_fact:
    sgReport: "{{ sgReport + '  Node ' + nodeNames.stdout_lines[0] + spacing + 'OK   ' + spacing + 'No deviations found.\n' }}"
  when: primDiff.stdout_lines|length == 0

- name: Safesync check header.
  set_fact:
    sgReport: "{{ sgReport + '  ---\n'}}"

- name: Report missing or incorrect Safesync parameters for {{ nodeNames.stdout_lines[1] }}.
  set_fact:
    sgReport: "{{ sgReport + '  Node ' + nodeNames.stdout_lines[1] + spacing + 'Error' + spacing + item + ' is missing or incorrect in global.ini.\n' }}"
  loop: "{{ secDiff.stdout_lines }}"
  when: secDiff.stdout_lines|length != 0

- name: Report healthy Safesync parameters for {{ nodeNames.stdout_lines[1] }}.
  set_fact:
    sgReport: "{{ sgReport + '  Node ' + nodeNames.stdout_lines[1] + spacing + 'OK   ' + spacing + 'No deviations found.\n' }}"
  when: secDiff.stdout_lines|length == 0

- name: Report missing or incorrect Safesync parameters in Primary package.
  set_fact:
    sgReport: "{{ sgReport + '\n  Package ' + primPackage.stdout + spacing + 'Error' + spacing + 'generic_resource_name safesync' + sid + '_genres is missing or incorrect in Primary package.\n' if primPkgSafesync.stdout is not match ('safesync[A-Z|0-9]{3}_genres') else sgReport + '\n  Package ' + primPackage.stdout + spacing + 'OK   ' + spacing + 'No deviations found.\n' }}"

- name: Report STO parameters in {{ primPackage.stdout }}.
  set_fact:
    sgReport: "{{ sgReport + '\nSTO parameter checks:\n  Package ' + primPackage.stdout + spacing + 'Error' + spacing + 'STO parameters must be removed.\n' if stoPrim.stdout is search ('hdb_sto') else sgReport + '\nSTO parameter checks:\n  Package ' + primPackage.stdout + spacing + 'OK   ' + spacing + 'No deviations found.\n' }}"

- name: Report STO parameters in {{ secPackage.stdout }}.
  set_fact:
    sgReport: "{{ sgReport + '  Package ' + secPackage.stdout + spacing + 'Error' + spacing + 'STO parameters must be removed.\n' if stoSec.stdout is search ('hdb_sto') else sgReport + '  Package ' + secPackage.stdout + spacing + 'OK   ' + spacing + 'No deviations found.\n' }}"

- name: Report missing or incorrect AUTOSTART_CMCLD parameter.
  set_fact:
    sgReport: "{{ sgReport + '\nAUTOSTART_CMCLD parameter:\n  Node ' + nodeNames.stdout_lines[0] + spacing + 'Error' + spacing + 'AUTOSTART_CMCLD is not set to 1.\n' if auto1.stdout is not search ('=\\s*1') else sgReport + '\nAUTOSTART_CMCLD parameter:\n  Node ' + nodeNames.stdout_lines[0] + spacing + 'OK   ' + spacing + 'No deviations found.\n' }}"

- name: Report missing or incorrect AUTOSTART_CMCLD parameter.
  set_fact:
    sgReport: "{{ sgReport + '  Node ' + nodeNames.stdout_lines[1] + spacing + 'Error' + spacing + 'AUTOSTART_CMCLD is not set to 1.\n' if auto2.stdout is not search ('=\\s*1') else sgReport + '  Node ' + nodeNames.stdout_lines[1] + spacing + 'OK   ' + spacing + 'No deviations found.\n' }}"

- name: Report missing or incorrect NODE_TOC_BEHAVIOR parameter.
  set_fact:
    sgReport: "{{ sgReport + '\nNODE_TOC_BEHAVIOR parameter:\n  Node ' + nodeNames.stdout_lines[0] + spacing + 'Error' + spacing + 'NODE_TOC_BEHAVIOR is not set to panic.\n' if toc1.stdout is not search ('panic') else sgReport + '\nNODE_TOC_BEHAVIOR parameter:\n  Node ' + nodeNames.stdout_lines[0] + spacing + 'OK   ' + spacing + 'No deviations found.\n' }}"

- name: Report mode of deadman driver.
  set_fact:
    sgReport: "{{ sgReport + '  Node ' + nodeNames.stdout_lines[0] + spacing + 'Error' + spacing + 'Panic mode must be activated using command cmsetsafety panic.\n' if deadman1.stdout is not search ('panic') else sgReport + '  Node ' + nodeNames.stdout_lines[0] + spacing + 'OK   ' + spacing + 'Panic mode is active in deadman driver.\n' }}"

- name: Report missing or incorrect NODE_TOC_BEHAVIOR parameter.
  set_fact:
    sgReport: "{{ sgReport + '  Node ' + nodeNames.stdout_lines[1] + spacing + 'Error' + spacing + 'NODE_TOC_BEHAVIOR is not set to panic.\n' if toc2.stdout is not search ('panic') else sgReport + '  Node ' + nodeNames.stdout_lines[1] + spacing + 'OK   ' + spacing + 'No deviations found.\n' }}"

- name: Report mode of deadman driver.
  set_fact:
    sgReport: "{{ sgReport + '  Node ' + nodeNames.stdout_lines[1] + spacing + 'Error' + spacing + 'Panic mode must be activated using command cmsetsafety panic.\n' if deadman2.stdout is not search ('panic') else sgReport + '  Node ' + nodeNames.stdout_lines[1] + spacing + 'OK   ' + spacing + 'Panic mode is active in deadman driver.\n' }}"

- name: Report missing or incorrect 'service/halib' parameter.
  set_fact:
    sgReport: "{{ sgReport + '\nParameter service/halib:\n  Node ' + nodeNames.stdout_lines[0] + spacing + 'OK   ' + spacing + 'No deviations found.\n' if (ansible_os_family == 'Suse' and primhalib.stdout == '/opt/cmcluster/lib64/saphpsghalib.so') or (ansible_os_family == 'RedHat' and primhalib.stdout == '/usr/local/cmcluster/lib/saphpsghalib.so') else sgReport + '\nParameter service/halib:\n  Node ' + nodeNames.stdout_lines[0] + spacing + 'Error' + spacing + 'Parameter is missing or incorrect in Instance profile.\n' }}"

- name: Report missing or incorrect 'service/halib' parameter.
  set_fact:
    sgReport: "{{ sgReport + '  Node ' + nodeNames.stdout_lines[1] + spacing + 'OK   ' + spacing + 'No deviations found.\n' if (ansible_os_family == 'Suse' and sechalib.stdout == '/opt/cmcluster/lib64/saphpsghalib.so') or (ansible_os_family == 'RedHat' and sechalib.stdout == '/usr/local/cmcluster/lib/saphpsghalib.so') else sgReport + '  Node ' + nodeNames.stdout_lines[1] + spacing + 'Error' + spacing + 'Parameter is missing or incorrect in Instance profile.\n' }}"

- name: Report missing or incorrect 'register_secondaries_on_takeover' parameter.
  set_fact:
    sgReport: "{{ sgReport + '\nParameter register_secondaries_on_takeover:\n  Node ' + nodeNames.stdout_lines[0] + spacing + 'OK   ' + spacing + 'No deviations found.\n' if regSec1.stdout is search ('true') else sgReport + '\nParameter register_secondaries_on_takeover:\n  Node ' + nodeNames.stdout_lines[0] + spacing + 'Error' + spacing + 'Parameter is missing or incorrect in global.ini.\n' }}"
  when: regSec1 is not skipped

- name: Report missing or incorrect 'register_secondaries_on_takeover' parameter.
  set_fact:
    sgReport: "{{ sgReport + '  Node ' + nodeNames.stdout_lines[1] + spacing + 'OK   ' + spacing + 'No deviations found.\n' if regSec2.stdout is search ('true') else sgReport + '  Node ' + nodeNames.stdout_lines[1] + spacing + 'Error' + spacing + 'Parameter is missing or incorrect in global.ini.\n' }}"
  when: regSec2 is not skipped

- name: Report status of exclusion rules for inifile_checker.
  set_fact:
    sgReport: "{{ sgReport + '\nParameter exclusion_global.ini/SYSTEM:\n  Node ' + nodeNames.stdout_lines[0] + spacing + 'OK   ' + spacing + 'No deviations found.\n' if pExclRule.stdout is search ('exclusion_global\\.ini\\/SYSTEM\\s*=\\s*ha_dr_provider_SGeSAPcl\\/\\*,\\s*system_replication\\/ha_dr\\*,\\s*trace\\/ha_dr\\*') else sgReport + '\nParameter exclusion_global.ini/SYSTEM:\n  Node ' + nodeNames.stdout_lines[0] + spacing + 'Warning' + spacing + 'Parameter is missing or incorrect in global.ini.\n' }}"
  when: pExclRule is not skipped

- name: Report status of exclusion rules for inifile_checker.
  set_fact:
    sgReport: "{{ sgReport + '  Node ' + nodeNames.stdout_lines[1] + spacing + 'OK   ' + spacing + 'No deviations found.\n' if sExclRule.stdout is search ('exclusion_global\\.ini\\/SYSTEM\\s*=\\s*ha_dr_provider_SGeSAPcl\\/\\*,\\s*system_replication\\/ha_dr\\*,\\s*trace\\/ha_dr\\*') else sgReport + '  Node ' + nodeNames.stdout_lines[1] + spacing + 'Warning' + spacing + 'Parameter is missing or incorrect in global.ini.\n' }}"
  when: sExclRule is not skipped
