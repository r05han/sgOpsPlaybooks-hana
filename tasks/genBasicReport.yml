- name: Report availability of {{ nodeNames.stdout_lines[0] }}.
  set_fact:
    sgReport: "{{ sgReport + '\nNode status:\n  Node ' + nodeNames.stdout_lines[0] + spacing + 'OK   ' + spacing + 'Up \n' if ping1 is not failed else sgReport + '\n  Node ' + nodeNames.stdout_lines[0] + spacing + 'Error' + spacing + 'Down \n' }}"

- name: Report availability of {{ nodeNames.stdout_lines[1] }}.
  set_fact:
    sgReport: "{{ sgReport + '  Node ' + nodeNames.stdout_lines[1] + spacing + 'OK   ' + spacing + 'Up \n' if ping2 is not failed else sgReport + '  Node ' + nodeNames.stdout_lines[1] + spacing + 'Error' + spacing + 'Down \n' }}"

- name: Report Primary package status.
  set_fact:
    sgReport: "{{ sgReport + '\nPackage status:\n  [Primary]   ' + primPackage.stdout + spacing + 'OK   ' + spacing + 'Running on ' + primNode.stdout + '\n' if primPackageStatus.stdout == 'up' else sgReport + '\nPackage status:\n  [Primary]   ' + primPackage.stdout + spacing + 'Error' + spacing + primPackageStatus.stdout + '\n' }}"

- name: Report Secondary package status.
  set_fact:
    sgReport: "{{ sgReport + '  [Secondary] ' + secPackage.stdout + spacing + 'OK   ' + spacing + 'Running on ' + secNode.stdout + '\n' if secPackageStatus.stdout == 'up' else sgReport + '  [Secondary] ' + secPackage.stdout + spacing + 'Error' + spacing + secPackageStatus.stdout + '\n' }}"

- name: Report 'autorun' status of {{ primPackage.stdout }}.
  set_fact:
    sgReport: "{{ sgReport + '\nAutorun and Switching status:\n  Package ' + primPackage.stdout + spacing + 'Error' + spacing + 'Autorun is disabled.\n' if primAutorun.stdout == 'disabled' else sgReport + '\nAutorun and Switching status:\n  Package ' + primPackage.stdout + spacing + 'OK   ' + spacing + 'Autorun is enabled.\n' }}"

- name: Report 'autorun' status of {{ secPackage.stdout }}.
  set_fact:
    sgReport: "{{ sgReport + '  Package ' + secPackage.stdout + spacing + 'Error' + spacing + 'Autorun is disabled.\n' if secAutorun.stdout == 'disabled' else sgReport + '  Package ' + secPackage.stdout + spacing + 'OK   ' + spacing + 'Autorun is enabled.\n' }}"

- name: Report 'switching' status for {{ primPackage.stdout }}.
  set_fact:
    sgReport: "{{ sgReport + '  Package ' + primPackage.stdout + spacing + 'Error' + spacing + 'Switching for this package is disabled on one or more nodes.\n' if primSwitch.stdout is search('disabled') else sgReport + '  Package ' + primPackage.stdout + spacing + 'OK   ' + spacing + 'Switching is enabled on all nodes.\n' }}"

- name: Report 'switching' status for {{ secPackage.stdout }}.
  set_fact:
    sgReport: "{{ sgReport + '  Package ' + secPackage.stdout + spacing + 'Error' + spacing + 'Switching for this package is disabled on one or more nodes.\n' if secSwitch.stdout is search('disabled') else sgReport + '  Package ' + secPackage.stdout + spacing + 'OK   ' + spacing + 'Switching is enabled on all nodes.\n' }}"

- name: Print safesync header.
  set_fact:
    sgReport: "{{ sgReport + '\nSafesync status:\n' }}"

- name: Report active safesync blocks.
  set_fact:
    sgReport: "{{ sgReport + '  Safesync       ' + spacing + 'Error' + spacing + item + '\n' }}"
  loop: "{{ safesync.stdout_lines }}"
  when: item.find(" active") != -1

- name: Report inactive safesync blocks.
  set_fact:
    sgReport: "{{ sgReport + '  Safesync       ' + spacing + 'OK   ' + spacing + item + '\n' }}"
  loop: "{{ safesync.stdout_lines }}"
  when: item.find("inactive") != -1

- name: Report other safesync blocks.
  set_fact:
    sgReport: "{{ sgReport + '  Safesync       ' + spacing + 'Error' + spacing + item + '\n' }}"
  loop: "{{ safesync.stdout_lines }}"
  when: item.find("inactive") == -1 and item.find(" active") == -1

- name: Report out-of-sync Log positions.
  set_fact:
    sgReport: "{{ sgReport + '\nLog replay status: ' + spacing + 'Error' + spacing + 'Log Positions on source and target are not identical.\n' if logposTime is not skipped and logposTime.stdout_lines|length == 2 and logposTime.stdout_lines[0] != logposTime.stdout_lines[1] else sgReport + '\nLog replay status: ' + spacing + 'OK   ' + spacing + 'Log Positions on source and target are identical.\n' if logposTime is not skipped and logposTime.stdout_lines|length == 2 and logposTime.stdout_lines[0] == logposTime.stdout_lines[1] else sgReport + '\nLog replay status: ' + spacing + 'Error' + spacing + 'Replication is broken.\n' }}"

- name: Report SG version of {{ nodeNames.stdout_lines[0] }}.
  set_fact:
    sgReport: "{{ sgReport + '\nServiceguard version comparison:\n  Node ' + nodeNames.stdout_lines[0] + spacing + 'OK   ' + spacing + primSGvers.stdout + '\n' if primSGvers.stdout == secSGvers.stdout else sgReport + '\nServiceguard version comparison:\n  Node ' + nodeNames.stdout_lines[0] + spacing + 'Error' + spacing + primSGvers.stdout + ' doesnt match the version on ' + nodeNames.stdout_lines[1] + '\n' }}"
  when: primSGvers is not skipped and secSGvers is not skipped

- name: Report SG version of {{ nodeNames.stdout_lines[1] }}.
  set_fact:
    sgReport: "{{ sgReport + '  Node ' + nodeNames.stdout_lines[1] + spacing + 'OK   ' + spacing + secSGvers.stdout + '\n' if primSGvers.stdout == secSGvers.stdout else sgReport + '  Node ' + nodeNames.stdout_lines[1] + spacing + 'Error' + spacing + secSGvers.stdout + ' doesnt match the version on ' + nodeNames.stdout_lines[0] + '\n' }}"
  when: primSGvers is not skipped and secSGvers is not skipped

- name: Placeholder if node is down.
  set_fact:
    sgReport: "{{ sgReport + '  NA            ' + spacing + 'NA   ' + spacing + nodeNames.stdout_lines[0] + ' is down.\n' if ping1 is failed else sgReport + '  NA            ' + spacing + 'NA   ' + spacing + nodeNames.stdout_lines[1] + ' is down.\n' }}"
  when: primSGvers is skipped or secSGvers is skipped

- name: Report missing or incorrect SGeSAP_AVOID_DARKENING parameter for {{ nodeNames.stdout_lines[0] }}.
  set_fact:
    sgReport: "{{ sgReport + '\nSGeSAP_AVOID_DARKENING parameter:\n  Node ' + nodeNames.stdout_lines[0] + spacing + 'Error' + spacing + 'SGeSAP_AVOID_DARKENING is not set to 2 in $SGCONF/scripts/ext/' + primPackage.stdout + '_customer_functions.sh.\n' if darkeningPrim.stdout is not search ('=\\s*2') else sgReport + '\nSGeSAP_AVOID_DARKENING parameter:\n  Node ' + nodeNames.stdout_lines[0] + spacing + 'OK   ' + spacing + 'No deviations found.\n' }}"

- name: Report missing or incorrect SGeSAP_AVOID_DARKENING parameter for {{ nodeNames.stdout_lines[1] }}.
  set_fact:
    sgReport: "{{ sgReport + '  Node ' + nodeNames.stdout_lines[1] + spacing + 'Error' + spacing + 'SGeSAP_AVOID_DARKENING is not set to 2 in $SGCONF/scripts/ext/' + primPackage.stdout + '_customer_functions.sh.\n' if darkeningSec.stdout is not search ('=\\s*2') else sgReport + '  Node ' + nodeNames.stdout_lines[1] + spacing + 'OK   ' + spacing + 'No deviations found.\n' }}"
