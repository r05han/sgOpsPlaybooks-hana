- name: Identify SG major version.
  shell: cmversion |awk -F. '{print $2}' || /bin/true
  register: sgMajor

- name: Identify SG minor version.
  shell: cmversion |awk -F. '{print $3}' || /bin/true
  register: sgMinor

- name: Abort if SG version < 12.80
  fail:
    msg: Minimum SGeSAP version 12.80 must be installed.
  when: sgMajor.stdout < "12" or (sgMajor.stdout == "12" and sgMinor.stdout < "80")

- name: Identify cluster name.
  shell: cmviewcl -v -fline | awk -F= '/^name/ {print $2}' || /bin/true
  register: result

- name: Abort if cluster is not configured.
  fail:
    msg: Cluster is not configured on this host.
  when: result.stderr is search ("Cannot view the cluster configuration")

- name: Save cluster name.
  set_fact:
    clusterName: "{{ result.stdout }}"

- name: Count of Primary packages.
  shell: cmviewcl -v -fline -s config |egrep "module_name=sgesap/hdbprimary" |awk -F':' '{print $2}' |awk -F\| '{print $1}' |wc -l || /bin/true
  register: primCount

- name: Abort if multi-SID cluster.
  fail:
    msg: Support for multi-SID clusters is not available in this version.
  when: primCount.stdout > "1"

- name: Identify SID of HANA DB.
  shell: cmviewcl -v -fline | awk -F= '/hdb_system=/ {print $2}' | awk 'NR==1 {print}' || /bin/true
  register: result

- name: Save SID name.
  set_fact:
    sid: "{{ result.stdout }}"

- name: Identify <sid>adm user.
  command: echo "{{ sid | lower }}adm"
  register: result
  delegate_to: localhost

- name: Save <sid>adm name.
  set_fact:
    sidadm: "{{ result.stdout }}"

- name: Identify Instance Number of HANA DB.
  shell: cat /usr/sap/sapservices |awk -F\/ '/{{ sid }}/ {print $5}' |cut -c 4,5 || /bin/true
  register: result

- name: Save Instance Number.
  set_fact:
    nr: "{{ result.stdout }}"

- name: Identify HANA version.
  shell: egrep -i fullversion /usr/sap/{{ sid }}/SYS/exe/hdb/manifest |awk '{print $2}' || /bin/true
  register: result

- name: Save HANA version.
  set_fact:
    hdbVers: "{{ result.stdout }}"

- name: Identify all cluster nodes.
  shell: cmviewcl -v -fline |awk -F\| '/^node/ {print $2}' |awk -F= '/^name/ {print $2}' || /bin/true
  register: nodeNames

- name: Abort if scale-Out cluster.
  fail:
    msg: Support for scale-Out clusters is not available in this version.
  when: nodeNames.stdout_lines|length > 3

- name: Check availability of {{ nodeNames.stdout_lines[0] }}.
  wait_for_connection:
    timeout: 2
  delegate_to: "{{ nodeNames.stdout_lines[0] }}"
  register: ping1
  ignore_errors: true

- name: Check availability of {{ nodeNames.stdout_lines[1] }}.
  wait_for_connection:
    timeout: 2
  delegate_to: "{{ nodeNames.stdout_lines[1] }}"
  register: ping2
  ignore_errors: true

- name: Identify SG version on {{ nodeNames.stdout_lines[0] }}.
  shell: cmversion || /bin/true
  register: primSGvers
  delegate_to: "{{ nodeNames.stdout_lines[0] }}"
  when: ping1 is not failed

- name: Identify SG version on {{ nodeNames.stdout_lines[1] }}.
  shell: cmversion || /bin/true
  register: secSGvers
  delegate_to: "{{ nodeNames.stdout_lines[1] }}"
  when: ping2 is not failed

- name: Identify Primary package.
  shell: cmviewcl -v -fline -s config |egrep "module_name=sgesap/hdbprimary" |awk -F':' '{print $2}' |awk -F\| '{print $1}' || /bin/true 
  register: primPackage

- name: Identify Secondary package.
  shell: cmviewcl -v -fline -p {{primPackage.stdout}} |awk -F':' '/dependency/ {print $2}' |awk -F_ '/same_node/ {print $1}' || /bin/true
  register: secPackage

- name: Check Primary package status.
  shell: cmviewcl -v -fline -p {{primPackage.stdout}} |awk -F= '/^status/ {print $2}' || /bin/true
  register: primPackageStatus

- name: Identify node with Primary role.
  shell: cmviewcl -v -fline -p {{primPackage.stdout}} |awk -F= '/^owner/ {print $2}' || /bin/true
  register: primNode
  when: primPackageStatus.stdout == "up"

- name: Check Secondary package status.
  shell: cmviewcl -v -fline -p {{secPackage.stdout}} |awk -F= '/^status/ {print $2}' || /bin/true
  register: secPackageStatus

- name: Identify node with Secondary role.
  shell: cmviewcl -v -fline -p {{secPackage.stdout}} |awk -F= '/^owner/ {print $2}' || /bin/true
  register: secNode
  when: secPackageStatus.stdout == "up"

- name: Check 'autorun' status of {{ primPackage.stdout }}.
  shell: cmviewcl -v -fline -p {{ primPackage.stdout }} |awk -F= '/^autorun/ {print $2}' || /bin/true
  register: primAutorun

- name: Check 'autorun' status of {{ secPackage.stdout }}.
  shell: cmviewcl -v -fline -p {{secPackage.stdout}} |awk -F= '/^autorun/ {print $2}' || /bin/true
  register: secAutorun

- name: Check 'switching' status for {{ primPackage.stdout }}.
  shell: cmviewcl -v -fline -p {{ primPackage.stdout }} |awk -F= '/switch/ {print $2}' || /bin/true
  register: primSwitch

- name: Check 'switching' status for {{ secPackage.stdout }}.
  shell: cmviewcl -v -fline -p {{ secPackage.stdout }} |awk -F= '/switch/ {print $2}' || /bin/true
  register: secSwitch

- name: Check safesync status.
  shell: sr_safesync {{ primPackage.stdout }} |egrep "\bblock\b" || /bin/true || /bin/true
  register: safesync

- name: Check HDB Log positions.
  shell: bash -lc "hdbcons 'replication info' |awk -F'[()]' '/lastLogPosTime|replayLogPosTime/ {print \$2}' || /bin/true"
  become_user: "{{ sidadm }}"
  register: logposTime
  delegate_to: "{{ primNode.stdout }}"
  when: primNode is not skipped

- name: Validate SGeSAP_AVOID_DARKENING parameter on {{ nodeNames.stdout_lines[0] }}.
  shell: "{{ (ansible_os_family == 'Suse') | ternary('cat /opt/cmcluster/conf/scripts/ext/' + primPackage.stdout + '_customer_functions.sh | egrep ^SGeSAP_AVOID_DARKENING || /bin/true','cat /usr/local/cmcluster/conf/scripts/ext/' + primPackage.stdout + '_customer_functions.sh | egrep ^SGeSAP_AVOID_DARKENING || /bin/true') }}"
  register: darkeningPrim
  delegate_to: "{{ nodeNames.stdout_lines[0] }}"

- name: Validate SGeSAP_AVOID_DARKENING parameter on {{ nodeNames.stdout_lines[1] }}.
  shell: "{{ (ansible_os_family == 'Suse') | ternary('cat /opt/cmcluster/conf/scripts/ext/' + primPackage.stdout + '_customer_functions.sh | egrep ^SGeSAP_AVOID_DARKENING || /bin/true','cat /usr/local/cmcluster/conf/scripts/ext/' + primPackage.stdout + '_customer_functions.sh | egrep ^SGeSAP_AVOID_DARKENING || /bin/true') }}"
  register: darkeningSec
  delegate_to: "{{ nodeNames.stdout_lines[1] }}"

- include_tasks: genBasicReport.yml
